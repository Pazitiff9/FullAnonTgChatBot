from typing import Union

from aiogram import Router, types, filters, F

from config import DB_PATH, MAX_SECRETS_PER_USER
from data_workers.sqlite_manager import SQLiteManager
from keyboards.client_keyboards import *
from main import bot
from utils.identifyer_generator import generate_unique_key


router = Router()
manager = SQLiteManager(DB_PATH)


class UserStateFilter(filters.BaseFilter):
    def __init__(self, user_status: Union[int, list]):
        self.user_status = user_status

    async def __call__(self, message: types.Message) -> bool:
        if isinstance(self.user_status, int):
            return manager.get_user_status(message.chat.id) == self.user_status
        else:
            return manager.get_user_status(message.chat.id) in self.user_status


@router.message(filters.Command("start"), UserStateFilter(0))
async def command_start(message: types.Message):
    if not manager.is_user_registered(message.chat.id):
        manager.register_new_user(message.chat.id)

    await message.answer("<b>–ü—Ä–∏–≤–µ—Ç üëã, –ê–Ω–æ–Ω–∏–º!</b>\n\n"
                         "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç! ü§ñ\n\n"
                         "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π "
                         "–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –∫–æ–º—É –ø–æ—Å—á–∏—Ç–∞–µ—à—å –Ω—É–∂–Ω—ã–º. üîë\n"
                         "–ì–ª–∞–≤–Ω–∞—è —Ñ–∏—à–∫–∞ —Ç–∞–∫–æ–≥–æ —á–∞—Ç–∞ - —ç—Ç–æ –ø–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å! –¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–∑–Ω–∞–µ—Ç —Ç–≤–æ—é "
                         "–ª–∏—á–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ —Ç—ã —Å–∞–º —ç—Ç–æ–≥–æ –Ω–µ –∑–∞—Ö–æ—á–µ—à—å. üòé\n\n"
                         "<b><i>–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –æ–±—â–µ–Ω–∏–µ! üí¨ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.</i></b>", reply_markup=main_kb())


@router.message(F.text == "üîé –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", UserStateFilter(0))
async def start_find_button_click(message: types.Message):
    await message.answer("<b>–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞... üïµÔ∏è ‚Äç–û–∂–∏–¥–∞–π—Ç–µ...</b>", reply_markup=in_find_kb())
    manager.update_user_status(message.chat.id, 1)

    if companion := manager.find_companion(message.chat.id):
        manager.update_user_status(message.chat.id, 2)
        manager.update_user_status(companion[0], 2)
        manager.register_new_chat(message.chat.id, companion[0])
        await message.answer("<b>–£—Ä–∞! üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –•–æ—Ä–æ—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è.</b>", reply_markup=in_chat_kb())
        await bot.send_message(companion[0], "<b>–£—Ä–∞! üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –•–æ—Ä–æ—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è.</b>", reply_markup=in_chat_kb())


@router.message(F.text == "üõë –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫", UserStateFilter(1))
async def start_find_button_click(message: types.Message):
    manager.update_user_status(message.chat.id, 0)
    await message.answer("<b>–ü—Ä–µ–∫—Ä–∞—â–∞—é –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. üö´</b>", reply_markup=main_kb())


@router.message(F.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥", UserStateFilter(2))
async def stop_dialog_button_click(message: types.Message):
    chat_participants = manager.find_chat_by_id(message.chat.id)
    companion_id = sum(chat_participants) - message.chat.id

    manager.update_user_status(message.chat.id, 0)
    manager.update_user_status(companion_id, 0)

    manager.delete_chat(message.chat.id)
    await message.answer("<b>–í–∞—à –¥–∏–∞–ª–æ–≥ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –≤–∞—à–µ–π –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ. üö´</b>", reply_markup=main_kb())
    await bot.send_message(companion_id, "<b>–í–∞—à –¥–∏–∞–ª–æ–≥ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. üö´</b>",
                           reply_markup=main_kb())


@router.message(F.text == "üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", UserStateFilter([0, 2]))
async def generate_secret_handler(message: types.Message):
    if manager.count_user_secrets(message.chat.id) >= MAX_SECRETS_PER_USER:
        await message.answer("<b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. "
                             "üö´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞—Ä—ã–µ.</b>")
        return

    new_secret = generate_unique_key(message.chat.id)
    manager.add_user_secret(message.chat.id, new_secret)
    await message.answer(f"<b>–í–∞—à –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è üîê: <tg-spoiler>{new_secret}</tg-spoiler></b>")


@router.message(F.text == "üîì –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ –∫–ª—é—á—É", UserStateFilter(0))
async def wait_connection_secret(message: types.Message):

    await message.answer("<b>–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è... üîë</b>",
                         reply_markup=clear_kb())
    manager.update_user_status(message.chat.id, 3)


@router.message(F.text, UserStateFilter(3))
async def check_connection_secret(message: types.Message):
    if len(message.text) != 64:
        await message.answer("<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞. ‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ "
                             "–∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –µ–≥–æ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞</b>", reply_markup=main_kb())
        manager.update_user_status(message.chat.id, 0)
        return

    desired_companion = manager.find_user_by_secret(message.text)

    if not desired_companion:
        await message.answer("<b>–ü–æ –¥–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–ª–∏ –∫–ª—é—á —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω. ‚ùå</b>",
                             reply_markup=main_kb())
        manager.update_user_status(message.chat.id, 0)
        return

    if desired_companion[0] == message.chat.id:
        await message.answer("<b>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ–±–µ –∂–µ. ‚ùå –ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, "
                             "—á—Ç–æ–±—ã –æ–Ω –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.</b>",
                             reply_markup=main_kb())
        manager.update_user_status(message.chat.id, 0)
        return

    if manager.find_chat_by_id(desired_companion[0]):
        await message.answer("<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚è≥</b>",
                             reply_markup=main_kb())
        manager.update_user_status(message.chat.id, 0)
        return

    manager.delete_user_secret(message.text)
    manager.update_user_status(message.chat.id, 2)
    manager.update_user_status(desired_companion[0], 2)
    manager.register_new_chat(message.chat.id, desired_companion[0])
    await message.answer("<b>–ü–æ–¥–∫–ª—é—á–∞—é –≤–∞—Å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é! üîÑ –•–æ—Ä–æ—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è.</b>", reply_markup=in_chat_kb())
    await bot.send_message(desired_companion[0], "<b>–° –≤–∞–º–∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á:\n"
                                                 f"<tg-spoiler>{message.text}</tg-spoiler>\n"
                                                 f"–ë–æ–ª–µ–µ —ç—Ç–æ—Ç –∫–ª—é—á –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω. ‚ùó</b>", reply_markup=in_chat_kb())


@router.message(UserStateFilter(2))
async def conversation(message: types.Message):
    chat_participants = manager.find_chat_by_id(message.chat.id)
    companion_id = sum(chat_participants) - message.chat.id

    await message.copy_to(companion_id)


@router.message()
async def conversation(message: types.Message):
    await message.delete()
